import pytest

from src.numbers import pi


@pytest.fixture()
def pi_1000_digits():
  return '3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198'  # noqa: E501


class TestBinarySplit:
  def test_binary_split_a_1_b_2(self):
    assert pi.binary_split(1, 26) == (
      -71945004495348429569706397057190151884077397744617037669241295145277736952797179410782010156607120418994922637939453125,
      351913571303010578620038772835381692160960135652154236354870138102828331777961705149128794048887494389455999963972367024269135147492905982807771745686181036551953344939236154954006392679373094386916859980673249995310107400576670408276669909315756184839786115030652953267410010161432320181960115344927029193949608173598680440511455256158445869647524124597241418759103919227292014870528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -89873002427649159076883349025707252927110883929862385421734469597773570705722067410173387323905031538880867194930452389908555767648960156628496629265699462266723023906122988405815267339901262101968722898024520703797118983644246593935295134829949354337553182178827556303398396492325825189285112920745849471427652451120390765843555755989961953788657416118893137011600462165746974589144546683724890736880182137857034464497907159241906666462609744770535744769268035888671875,
    )


class TestChudnovsky:
  def test_chudnovsky_25th_digit(self, pi_1000_digits):
    assert str(pi.chudnovsky(25)) == str(pi_1000_digits)[:26]

  def test_chudnovsky_100th_digit(self, pi_1000_digits):
    assert str(pi.chudnovsky(100)) == str(pi_1000_digits)[:101]

  def test_chudnovsky_500th_digit(self, pi_1000_digits):
    assert str(pi.chudnovsky(500)) == str(pi_1000_digits)[:501]

  def test_chudnovsky_1000th_digit(self, pi_1000_digits):
    assert str(pi.chudnovsky(1000)) == pi_1000_digits


class TestPi:
  def test_pi_1_digit(self, pi_1000_digits):
    assert str(pi.pi(1)) == '3'

  def test_pi_5th_digit(self, pi_1000_digits):
    assert str(pi.pi(5)) == pi_1000_digits[:6]

  def test_pi_15th_digit(self, pi_1000_digits):
    assert str(pi.pi(15)) == pi_1000_digits[:16]

  def test_chudnovsky_called_for_gte_15_digits(self, mocker):
    COUNT = 3
    spy = mocker.spy(pi, 'chudnovsky')
    pi.pi(16)
    pi.pi(500)
    pi.pi(1000)
    assert spy.call_count == COUNT


class TestMain:
  def test_main(self, mocker, capfd, pi_1000_digits):
    mocker.patch('builtins.input', side_effect=['10', 'q'])
    pi.main()
    out, err = capfd.readouterr()
    assert out == f'{pi_1000_digits[: 11]}\n'
    assert err == ''

  @pytest.mark.parametrize('inp', ['-10', '0', '1001'])
  def test_main_invalid_input(self, mocker, capfd, inp):
    mocker.patch('builtins.input', side_effect=[inp, 'q'])
    pi.main()
    out, err = capfd.readouterr()
    assert out == 'digits must be a positive integer less than 1000\n'
    assert err == ''
